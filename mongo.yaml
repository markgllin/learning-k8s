# Deployment & Service combined in 1 file
#
# needs to be created before webapp because webapp depends
# on database to start.
#
# kubectl apply -f mongo.yaml
# 
# equivalent to `kubectl apply -f mongo.yaml -n default`
# where resources are created in default namespace
#
apiVersion: apps/v1
kind: Deployment  # Blueprint for pods
metadata:
  name: mongo-deployment
  labels:
    app: mongo  # can give any k8s a label. Label - k/v pair attached to a resource
spec:
  replicas: 1 # how many pods to spin up
  selector:
    matchLabels:  # identifier indicating it belongs to the Deployment labeled 'mongo'
      app: mongo
  template: # configuration for pod
    metadata:
      labels:
        app: mongo
    spec:
      containers: # can have multiple containers in a pod but usually just 1 service
      - name: mongodb
        image: mongo:5.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret # metadata name of secret to use (mongo-secret.yaml)
              key: mongo-user
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-password
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service # endpoint to access mongo (same as mongo-url in mongo-config.yaml)
spec:
  # Indicates it's an internal service (not exposed/accessible outside of pod)
  # Default == ClusterIP so does not need to be specified
  # type: ClusterIP
  selector:
    app: mongo # identifier connecting Pod to service based on same label, allowing pods to fwd request to service
  ports:
    - protocol: TCP
      port: 27017        # port on which service will be exposed internally in cluster
      targetPort: 27017  # port on the container inside pod to which traffic will be forwarded